create table public.project_members (
  id bigint generated by default as identity not null,
  project_id bigint not null,
  user_id uuid not null,
  joined_at timestamp with time zone not null default now(),
  role text not null default 'member'::text,
  constraint project_members_pkey primary key (id),
  constraint project_members_unique_membership unique (project_id, user_id),
  constraint project_members_project_id_fkey foreign KEY (project_id) references projects (id) on update CASCADE on delete CASCADE,
  constraint project_members_user_id_fkey foreign KEY (user_id) references auth.users (id) on update CASCADE on delete CASCADE,
  constraint project_members_role_check check (
    (
      role = any (array['leader'::text, 'member'::text])
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_project_members_project_id on public.project_members using btree (project_id) TABLESPACE pg_default;

create index IF not exists idx_project_members_user_id on public.project_members using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_project_members_role on public.project_members using btree (role) TABLESPACE pg_default;

create trigger trigger_check_team_size BEFORE INSERT on project_members for EACH row
execute FUNCTION check_team_size ();